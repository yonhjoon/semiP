<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
 <configuration>
 	<!-- settings : mybatis구동시 선언할 설정들을 작성하는 영역 -->
 	<settings>
 		<!-- 만약 null로 데이터가 전달되었다면 빈칸이 아닌 null로 인식해라(무조건 대문자 NULL) -->
 		<setting name="jdbcTypeForNull" value="NULL"/>
 	</settings>
 	<!-- typeAlias : VO/DTO 클래스들의 풀클래스명을 단순한 클래스명(별칭)으로 사용하기위한 별칭을 등록하는 영역-->
 	<typeAliases>
 		<typeAlias type="com.two.attachment.model.vo.Attachment" alias="Attachment"/>
 		<typeAlias type="com.two.board.model.vo.Board" alias="Board"/>
 		<typeAlias type="com.two.category.model.vo.Category" alias="Category"/>
 		<typeAlias type="com.two.category.model.vo.CateMiddle" alias="CategoryMiddle"/>
 		<typeAlias type="com.two.category.model.vo.CateTop" alias="CategoryTop"/>
 		<typeAlias type="com.two.comments.model.vo.Comments" alias="Comments"/>
 		<typeAlias type="com.two.evaluationItems.model.vo.EvaluationItems" alias="EvaluationItems"/>
 		<typeAlias type="com.two.faq.model.vo.Faq" alias="Faq"/>
 		<typeAlias type="com.two.member.model.vo.Member" alias="Member"/>
 		<typeAlias type="com.two.myPage.model.vo.MyPage" alias="MyPage"/>
 		<typeAlias type="com.two.priceOffers.model.vo.PriceOffers" alias="PriceOffers"/>
 		<typeAlias type="com.two.product.model.vo.Product" alias="Product"/>
 		<typeAlias type="com.two.product.model.vo.Request" alias="Request"/>
 		<typeAlias type="com.two.product.model.vo.Reply" alias="Reply"/>
 		<typeAlias type="com.two.product.model.vo.Nreply" alias="Nreply"/>
 		<typeAlias type="com.two.tradeReviews.model.vo.TradeReviews" alias="TradeReviews"/>
 		<typeAlias type="com.two.wishList.model.vo.WishList" alias="WishList"/>
 	</typeAliases>
 	
 	<!-- environments : mybatis에서 연동할 DB정보들을 등록하는 영역-->
 	<environments default="development">
 		<environment id="development">
 			<!-- 
 				transactionManager : JDBC와 MANAGED 둘중 하나의 타입을 설정할 수 있다.
 				- JDBC : 트랜잭션을 내가 직접 관리할 것이다(수동commit)
 				- MANAGED : 트랜잭션에 대해서 어떠한 영향도 행사하지 않겠다.(자동commit) 
 			-->
 			<transactionManager type="JDBC"/>
 			<!-- 
 				*dataSource는 POOLED(사용)와 UNPOOLED(미사용) 둘중 하나의 타입을 선택할 수 있다.(connectionPool의 사용여부)
 				>> ConnectionPool : Connection객체를 담아둘 수 있는 영역
 									한번 생성된 Connection객체를 담아두면 재사용해서 쓸 수 있다.
 			 -->
 			<dataSource type="POOLED">
		        <property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
		        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		        <property name="username" value="SEMI"/>
		        <property name="password" value="SEMI"/>
	        </dataSource>
 		</environment>
 	</environments>
 	<!-- mappers : 실행할 sql문들을 기록해둔 mapper파일들을 등록하는 영역 -->
 	<mappers>
 		<mapper resource="/mappers/attachment-mapper.xml"/>
 		<mapper resource="/mappers/board-mapper.xml"/>
 		<mapper resource="/mappers/category_middle-mapper.xml"/>
 		<mapper resource="/mappers/category_top-mapper.xml"/>
 		<mapper resource="/mappers/comments-mapper.xml"/>
 		<mapper resource="/mappers/evaluationItems-mapper.xml"/>
 		<mapper resource="/mappers/faq-mapper.xml"/>
 		<mapper resource="/mappers/member-mapper.xml"/>
 		<mapper resource="/mappers/priceOffers-mapper.xml"/>
 		<mapper resource="/mappers/tradeReviews-mapper.xml"/>
 		<mapper resource="/mappers/wishList-mapper.xml"/>
 		<mapper resource="/mappers/product-mapper.xml"/>
 		<mapper resource="/mappers/myPage-mapper.xml"/>
 	</mappers>

 	
 </configuration>